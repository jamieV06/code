import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QGridLayout, QWidget, QMessageBox

class TicTacToe(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Tic Tac Toe")
        self.setGeometry(100, 100, 300, 300)

        # Set up the game board
        self.board = ['' for _ in range(9)]
        self.current_player = "X"
        self.buttons = []

        # Set up the grid layout
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.grid = QGridLayout(self.central_widget)

        # Create buttons for each cell
        for i in range(9):
            button = QPushButton("")
            button.setFixedSize(100, 100)
            button.setStyleSheet("font-size: 24px;")
            button.clicked.connect(lambda _, idx=i: self.handle_click(idx))
            self.grid.addWidget(button, i // 3, i % 3)
            self.buttons.append(button)

    def handle_click(self, idx):
        if self.board[idx] == '':  # If cell is empty
            self.board[idx] = self.current_player
            self.buttons[idx].setText(self.current_player)
            
            if self.check_winner():
                self.show_message(f"Player {self.current_player} wins!")
                self.reset_board()
            elif '' not in self.board:  # If board is full and no winner
                self.show_message("It's a tie!")
                self.reset_board()
            else:
                self.current_player = "O" if self.current_player == "X" else "X"  # Switch player

    def check_winner(self):
        # Check all winning combinations
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
            [0, 4, 8], [2, 4, 6]  # Diagonals
        ]
        for combo in winning_combinations:
            if self.board[combo[0]] == self.board[combo[1]] == self.board[combo[2]] != '':
                return True
        return False

    def show_message(self, message):
        msg_box = QMessageBox()
        msg_box.setText(message)
        msg_box.exec_()

    def reset_board(self):
        self.board = ['' for _ in range(9)]
        for button in self.buttons:
            button.setText("")
        self.current_player = "X"


if __name__ == "__main__":
    app = QApplication(sys.argv)
    game = TicTacToe()
    game.show()
    sys.exit(app.exec_())
